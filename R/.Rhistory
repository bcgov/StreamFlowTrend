help(modifiedmk)
help(package=modifiedmk)
shiny::runApp('~/Dropbox/00-current-tasks/2021-03-31-StreamFlowINdicator/StreamFlowTrend-master')
knitr::opts_chunk$set(echo = TRUE)
options(width=200)
library(bcmaps)
library(broom)
library(broom.mixed)
library(geosphere) # get distance between stations
library(ggforce)  # facet_wrap_paginate
library(htmltools)
library(tidyverse)
library(tidyhydat)
library(leaflet)
library(leaflet.extras)
library(plotly)
library(rmapshaper)
library(sf)
set.seed(324234)
library(StreamFlowTrend)
trend.stat.names <- c("estimate","se","p.value","rho","se.adj","p.value.adj")
station_number <- '08NM116'
station.info <- hy_stations( station_number)
# get the bc_stations data
bc_stations <- hy_stations( prov_terr_state_loc="BC")
stfl_get_avail_stat()
station_number <- '08NM116'
station.info <- hy_stations( station_number)
# find the stations within 10 km of the station of interest
max.distance <- 50 # km
base.station   <-  tidyhydat::hy_stations(station_number)
bc_stations <-  tidyhydat::hy_stations(prov_terr_state_loc="BC")
bc_stations$distance <- geosphere::distHaversine(base.station  [,c("LONGITUDE","LATITUDE")],
bc_stations[,c("LONGITUDE","LATITUDE")])/1000 # distance in km
select <- bc_stations$distance <= max.distance
station_list <- bc_stations$STATION_NUMBER[select]
bc_stations[ bc_stations$STATION_NUMBER %in% station_list, c("STATION_NUMBER","STATION_NAME","HYD_STATUS","LATITUDE","LONGITUDE","distance")]
daily.data <- plyr::ldply(station_list, function(station_number){
daily.data <- tryCatch(
{hy_daily_flows(station_number)},
error=function(cond) {
cat(paste0("No flow data for ", station_number,"\n"))
return(NULL)
}
)
daily.data
})
daily.data$Year <- lubridate::year(daily.data$Date)
runApp('~/Dropbox/00-current-tasks/2021-03-31-StreamFlowINdicator/StreamFlowTrend-master')
input$trendMstation
station.data <- plyr::ldply(input$trendMstation, function(station_number){
hy_daily(station_number=station_number)
})
View(station.data)
input$trendMStatistic
trend.annual.long <- stfl_calc_annual_stats(station.data, Statistic=input$trendMStatistic,
water_year_start=input$trendMAnnualMonthStart,
months_in_year  =input$trendMAnnualNumMonth, ignore_missing=input$trendMIgnoreMissing)
traceback()
head(station.data)
str(station.data)
sum(is.na(station.data$Date))
runApp('~/Dropbox/00-current-tasks/2021-03-31-StreamFlowINdicator/StreamFlowTrend-master')
runApp('~/Dropbox/00-current-tasks/2021-03-31-StreamFlowINdicator/StreamFlowTrend-master')
runApp('~/Dropbox/00-current-tasks/2021-03-31-StreamFlowINdicator/StreamFlowTrend-master')
# needs the HYDAT package installed
station.id <- "08NM035"
data <- stfl_get_annual_stat(station.id, Statistic=c("Min_3_Day_Value"))
stfl_get_avail_stat()
data <- stfl_get_annual_stat(station.id, Statistic=c("Min_3_Day"))
temp <- stfl_trend_kstn_kstat(data, log.Y=TRUE)
stfl_plot_trends(temp, plot.fit=c("MK","LM","LMrob"))
stfl_plot_trends(temp, plot.fit=c("LMrob"), plotly=TRUE)
temp
help(signif)
signif(1.134234324, 6)
signif(23423432243,6)
signif(.000023423432, 6)
# Copyright 2021 Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
#' @title Plot the results from station level fits to various statistics and various stations
#' @param  fit.res Fit result created by \code{tfl_trend_kstn_kstat()} which is a list and each element of the list has
#'  the \code{estimates} data.frame and the \code{data.aug} data.frame with original data with the predicted values from a
#'  LM, MK, and LMrob fit.
#' @param connect.points Should the annualized values be connected with a line.
#' @template  plot.fit
#' @param plotly Should a plot_ly() graph be returned (default), or a ggplot graph
#' @return plot_ly graph of the results
#'
#' @importFrom plotly ggplotly add_trace add_lines
#' @import ggplot2
#' @import reshape2
#' @import plyr
#' @importFrom magrittr %>%
#' @importFrom scales pretty_breaks
#'
#' @examples
#' \dontrun{
#' # needs the HYDAT package installed
#' station.id <- "08NM116"
#' data <- stfl_get_annual_stat(station.id, Statistic=c("MEAN","P10","P90"))
#' temp <- stfl_trend_kstn_kstat(data, log.Y=TRUE)
#' stfl_plot_trends(temp, plot.fit=c("MK","LM","LMrob"))
#' stfl_plot_trends(temp, plot.fit=c("LMrob"), plotly=TRUE)
#' }
#' @export
stfl_plot_trends <- function(fit.res, plot.fit=c("LMrob","LM","MK")[1], connect.points=TRUE, plotly=TRUE){
#
#browser()
if(exists("stfl_options") && stfl_options()$debug){
cat("stfl_plot_trends", "\n")
}
values <-c("LMrob","LM","MK")
if( !is.null(plot.fit)){
if(!all(plot.fit %in% values))stop("plot_trends - illegal value of plot.fit")
}
if(!is.logical(connect.points))stop("connect.points must be logical of length 1")
if(!length(connect.points)==1) stop("connect.points must be logical of length 1")
# the first element of the list is checked for the Paramter type, statistics, and if logged
# this is used to set up the Y axis label
log.Y <- fit.res[[1]]$estimates$log.Y[1]
# get the Y axis label based on the first set of estimates
first.Parameter = fit.res[[1]]$estimates$Parameter[1]
first.Statistic = fit.res[[1]]$estimates$Statistic[1]
stat.list <- stfl_get_avail_stat()
stat.index <- tolower(stat.list$Statistic) == tolower(first.Statistic)
Y.label <- ifelse(first.Parameter=="Flow", stat.list$Flow.Y.label[ stat.index], stat.list$Level.Y.label[ stat.index])
#browser()
# extract all of the augmented data sets from the list of fist
plotdata.wide <- plyr::ldply(fit.res, function(fit) {
fit$data.aug
})
#browser()
plotdata <- reshape2::melt(plotdata.wide,
id.vars=c("STATION_NUMBER","Parameter","Statistic","Year"),
measure.vars=c("Value","pred.LM","pred.MK","pred.LMrob"),
variable.name="Source",
value.name="Value")
plotdata$Source <- as.character(plotdata$Source)
plotdata <- plotdata[ plotdata$Source %in% c("Value",paste0("pred.",plot.fit)),]
plotdata$trace <- paste0(plotdata$STATION_NUMBER," ",plotdata$Statistic, " ",plotdata$Source)
if(log.Y) plotdata$Value[ plotdata$Source %in% paste0("pred.",plot.fit)] <- exp(plotdata$Value[ plotdata$Source %in% paste0("pred.",plot.fit)])
#plotdata$Value  <- round(plotdata$Value,3)
plotdata$Value  <- signif(plotdata$Value,6)
# see https://stackoverflow.com/questions/9439256/how-can-i-handle-r-cmd-check-no-visible-binding-for-global-variable-notes-when
myplot <- ggplot(data=plotdata, aes_(x=~Year, y=~Value, group=~trace))+
geom_point(data=plotdata[plotdata$Source=="Value",])+
geom_line(data=plotdata[plotdata$Source != "Value",], aes(color=trace))+
xlab("Year")+ylab(Y.label)
if(connect.points)myplot <- myplot + geom_line(data=plotdata[plotdata$Source == "Value",], aes(color=trace))
# if log(Y) scale, then we need to modify the axis
if(log.Y) myplot <- myplot + scale_y_continuous(trans = 'log', breaks=scales::pretty_breaks(n=5))
if(plotly)myplot <- plotly::ggplotly(myplot)
return(myplot)
# This was the old code using plotly to create the plots.
# Unfortunately, you can't popup the plotly graphs, so I had to convert to ggplot2
# These are kept here incase the popup issue gets fixed.
# #browser()
# # plot individual data values for each station
# plyr::l_ply(fit.res, function(fit){
#   plot <<- plot %>% add_trace(data=fit$data.aug,x= ~Year,y=~Value, type="scatter",
#                                 name=~paste0(STATION_NUMBER," ",Statistic), mode = 'lines+markers',
#                                 hoverinfo= 'text',text=~paste(STATION_NUMBER,": ",round(Value,3)),
#                                 line=list(color='grey'))
# })
#
# # add the fitted lines if requested
# # the first time through we add to the legend;
# first <- "yes"
# if(!is.null(plot.fit)){
#   plyr::l_ply(fit.res, function(fit){
#     if("LM" %in% plot.fit){
#        if(log.Y)fit$data.aug$pred.LM <- exp(fit$data.aug$pred.LM) # need to adjust before plot
#        plot <<- plot %>% add_lines(data=fit$data.aug,
#                                 x = ~Year,
#                                 y = ~pred.LM,
#                                 mode = "lines", name="LM", legendgroup="LM", line=list(color='grey'),
#                                 showlegend=first=="yes",
#                                 hoverinfo= 'text', hoverlabel=list(bgcolor="white"),
#                                 text=paste("LM Slope: ",
#                                 formatC(fit$estimates$estimate[fit$estimates$coefficient=="slope" &
#                                                                   fit$estimates$method     =="LM"],
#                                          digits=3, format="f")))
#
#     }
#     if("LMrob" %in% plot.fit){
#       if(log.Y)fit$data.aug$pred.LMrob <- exp(fit$data.aug$pred.LMrob) # need to adjust before plot
#        plot <<- plot %>% add_lines(data=fit$data.aug,
#                                 x = ~Year,
#                                 y = ~pred.LMrob,
#                                 mode = "lines", name="LMrob",legendgroup="LMrob", line=list(color='blue'),
#                                 showlegend=first=="yes",
#                                 hoverinfo= 'text', hoverlabel=list(bgcolor="white"),
#                                 text=paste("LMrob Slope: ",
#                                  formatC(fit$estimates$estimate[fit$estimates$coefficient=="slope" &
#                                                                   fit$estimates$method   =="LMrob"],
#                                          digits=3, format="f")))
#     }
#     if("MK" %in% plot.fit){
#       if(log.Y)fit$data.aug$pred.MK <- exp(fit$data.aug$pred.MK) # need to adjust before plot
#        plot <<- plot %>% add_lines(data=fit$data.aug,
#                                 x = ~Year,
#                                 y = ~pred.MK,
#                                 mode = "lines", name="MK", legendgroup="MK", line=list(color='green'),
#                                 showlegend=first=="yes",
#                                 hoverinfo= 'text', hoverlabel=list(bgcolor="white"),
#                                 text=paste("MK Slope: ",
#                                  formatC(fit$estimates$estimate[fit$estimates$coefficient=="slope" &
#                                                                   fit$estimates$method     =="MK"],
#                                          digits=3, format="f")))
#     }
#     first <<- "no"
#   })
# }
# plot
}
# needs the HYDAT package installed
station.id <- "08NM035"
data <- stfl_get_annual_stat(station.id, Statistic=c("Min_3_Day"))
temp <- stfl_trend_kstn_kstat(data, log.Y=TRUE)
stfl_plot_trends(temp, plot.fit=c("MK","LM","LMrob"))
stfl_plot_trends(temp, plot.fit=c("LMrob"), plotly=TRUE)
# Copyright 2021 Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
#' @title Plot the results from station level fits to various statistics and various stations
#' @param  fit.res Fit result created by \code{tfl_trend_kstn_kstat()} which is a list and each element of the list has
#'  the \code{estimates} data.frame and the \code{data.aug} data.frame with original data with the predicted values from a
#'  LM, MK, and LMrob fit.
#' @param connect.points Should the annualized values be connected with a line.
#' @template  plot.fit
#' @param plotly Should a plot_ly() graph be returned (default), or a ggplot graph
#' @return plot_ly graph of the results
#'
#' @importFrom plotly ggplotly add_trace add_lines
#' @import ggplot2
#' @import reshape2
#' @import plyr
#' @importFrom magrittr %>%
#' @importFrom scales pretty_breaks
#'
#' @examples
#' \dontrun{
#' # needs the HYDAT package installed
#' station.id <- "08NM116"
#' data <- stfl_get_annual_stat(station.id, Statistic=c("MEAN","P10","P90"))
#' temp <- stfl_trend_kstn_kstat(data, log.Y=TRUE)
#' stfl_plot_trends(temp, plot.fit=c("MK","LM","LMrob"))
#' stfl_plot_trends(temp, plot.fit=c("LMrob"), plotly=TRUE)
#' }
#' @export
stfl_plot_trends <- function(fit.res, plot.fit=c("LMrob","LM","MK")[1], connect.points=TRUE, plotly=TRUE){
#
#browser()
if(exists("stfl_options") && stfl_options()$debug){
cat("stfl_plot_trends", "\n")
}
values <-c("LMrob","LM","MK")
if( !is.null(plot.fit)){
if(!all(plot.fit %in% values))stop("plot_trends - illegal value of plot.fit")
}
if(!is.logical(connect.points))stop("connect.points must be logical of length 1")
if(!length(connect.points)==1) stop("connect.points must be logical of length 1")
# the first element of the list is checked for the Paramter type, statistics, and if logged
# this is used to set up the Y axis label
log.Y <- fit.res[[1]]$estimates$log.Y[1]
# get the Y axis label based on the first set of estimates
first.Parameter = fit.res[[1]]$estimates$Parameter[1]
first.Statistic = fit.res[[1]]$estimates$Statistic[1]
stat.list <- stfl_get_avail_stat()
stat.index <- tolower(stat.list$Statistic) == tolower(first.Statistic)
Y.label <- ifelse(first.Parameter=="Flow", stat.list$Flow.Y.label[ stat.index], stat.list$Level.Y.label[ stat.index])
#browser()
# extract all of the augmented data sets from the list of fist
plotdata.wide <- plyr::ldply(fit.res, function(fit) {
fit$data.aug
})
#browser()
plotdata <- reshape2::melt(plotdata.wide,
id.vars=c("STATION_NUMBER","Parameter","Statistic","Year"),
measure.vars=c("Value","pred.LM","pred.MK","pred.LMrob"),
variable.name="Source",
value.name="Value")
plotdata$Source <- as.character(plotdata$Source)
plotdata <- plotdata[ plotdata$Source %in% c("Value",paste0("pred.",plot.fit)),]
plotdata$trace <- paste0(plotdata$STATION_NUMBER," ",plotdata$Statistic, " ",plotdata$Source)
if(log.Y) plotdata$Value[ plotdata$Source %in% paste0("pred.",plot.fit)] <- exp(plotdata$Value[ plotdata$Source %in% paste0("pred.",plot.fit)])
#plotdata$Value  <- round(plotdata$Value,3)
plotdata$Value  <- signif(plotdata$Value,3)
# see https://stackoverflow.com/questions/9439256/how-can-i-handle-r-cmd-check-no-visible-binding-for-global-variable-notes-when
myplot <- ggplot(data=plotdata, aes_(x=~Year, y=~Value, group=~trace))+
geom_point(data=plotdata[plotdata$Source=="Value",])+
geom_line(data=plotdata[plotdata$Source != "Value",], aes(color=trace))+
xlab("Year")+ylab(Y.label)
if(connect.points)myplot <- myplot + geom_line(data=plotdata[plotdata$Source == "Value",], aes(color=trace))
# if log(Y) scale, then we need to modify the axis
if(log.Y) myplot <- myplot + scale_y_continuous(trans = 'log', breaks=scales::pretty_breaks(n=5))
if(plotly)myplot <- plotly::ggplotly(myplot)
return(myplot)
# This was the old code using plotly to create the plots.
# Unfortunately, you can't popup the plotly graphs, so I had to convert to ggplot2
# These are kept here incase the popup issue gets fixed.
# #browser()
# # plot individual data values for each station
# plyr::l_ply(fit.res, function(fit){
#   plot <<- plot %>% add_trace(data=fit$data.aug,x= ~Year,y=~Value, type="scatter",
#                                 name=~paste0(STATION_NUMBER," ",Statistic), mode = 'lines+markers',
#                                 hoverinfo= 'text',text=~paste(STATION_NUMBER,": ",round(Value,3)),
#                                 line=list(color='grey'))
# })
#
# # add the fitted lines if requested
# # the first time through we add to the legend;
# first <- "yes"
# if(!is.null(plot.fit)){
#   plyr::l_ply(fit.res, function(fit){
#     if("LM" %in% plot.fit){
#        if(log.Y)fit$data.aug$pred.LM <- exp(fit$data.aug$pred.LM) # need to adjust before plot
#        plot <<- plot %>% add_lines(data=fit$data.aug,
#                                 x = ~Year,
#                                 y = ~pred.LM,
#                                 mode = "lines", name="LM", legendgroup="LM", line=list(color='grey'),
#                                 showlegend=first=="yes",
#                                 hoverinfo= 'text', hoverlabel=list(bgcolor="white"),
#                                 text=paste("LM Slope: ",
#                                 formatC(fit$estimates$estimate[fit$estimates$coefficient=="slope" &
#                                                                   fit$estimates$method     =="LM"],
#                                          digits=3, format="f")))
#
#     }
#     if("LMrob" %in% plot.fit){
#       if(log.Y)fit$data.aug$pred.LMrob <- exp(fit$data.aug$pred.LMrob) # need to adjust before plot
#        plot <<- plot %>% add_lines(data=fit$data.aug,
#                                 x = ~Year,
#                                 y = ~pred.LMrob,
#                                 mode = "lines", name="LMrob",legendgroup="LMrob", line=list(color='blue'),
#                                 showlegend=first=="yes",
#                                 hoverinfo= 'text', hoverlabel=list(bgcolor="white"),
#                                 text=paste("LMrob Slope: ",
#                                  formatC(fit$estimates$estimate[fit$estimates$coefficient=="slope" &
#                                                                   fit$estimates$method   =="LMrob"],
#                                          digits=3, format="f")))
#     }
#     if("MK" %in% plot.fit){
#       if(log.Y)fit$data.aug$pred.MK <- exp(fit$data.aug$pred.MK) # need to adjust before plot
#        plot <<- plot %>% add_lines(data=fit$data.aug,
#                                 x = ~Year,
#                                 y = ~pred.MK,
#                                 mode = "lines", name="MK", legendgroup="MK", line=list(color='green'),
#                                 showlegend=first=="yes",
#                                 hoverinfo= 'text', hoverlabel=list(bgcolor="white"),
#                                 text=paste("MK Slope: ",
#                                  formatC(fit$estimates$estimate[fit$estimates$coefficient=="slope" &
#                                                                   fit$estimates$method     =="MK"],
#                                          digits=3, format="f")))
#     }
#     first <<- "no"
#   })
# }
# plot
}
# needs the HYDAT package installed
station.id <- "08NM035"
data <- stfl_get_annual_stat(station.id, Statistic=c("Min_3_Day"))
temp <- stfl_trend_kstn_kstat(data, log.Y=TRUE)
stfl_plot_trends(temp, plot.fit=c("MK","LM","LMrob"))
stfl_plot_trends(temp, plot.fit=c("LMrob"), plotly=TRUE)
